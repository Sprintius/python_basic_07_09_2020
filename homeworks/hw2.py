''''
1. Создать список и заполнить его элементами различных типов данных.
 Реализовать скрипт проверки типа данных каждого элемента.
 Использовать функцию type() для проверки типа.
 Элементы списка можно не запрашивать у пользователя, а указать явно, в программе.
'''

a = [17, False, 'Hello', 12.22]
for el in a:
    print(type(el))


'''
2. Для списка реализовать обмен значений соседних элементов, т.е.
 Значениями обмениваются элементы с индексами 0 и 1, 2 и 3 и т.д.
 При нечетном количестве элементов последний сохранить на своем месте.
 Для заполнения списка элементов необходимо использовать функцию input().
'''

list_count = int(input("Введите количество элементов списка "))
my_list = []
i = 0
el = 0
while i < list_count:
    my_list.append(input("Введите значение списка "))
    i += 1

for elem in range(int(len(my_list)/2)):
        my_list[el], my_list[el + 1] = my_list [el + 1], my_list[el]
        el += 2
print(my_list)


'''
3. Напишите решения через list и через dict. 
 Пользователь вводит месяц в виде целого числа от 1 до 12. 
 Сообщить к какому времени года относится месяц (зима, весна, лето, осень).
'''

seasons_list = ['winter', 'spring', 'summer', 'autumn']
seasons_dict = {1 : 'winter', 2 : 'spring', 3 : 'summer', 4 : 'autumn'}
a = int(input("Введите номер месяца "))
if a ==1 or a == 12 or a == 2:
        print(seasons_dict.get(1))
        print(seasons_list[0])
elif a == 3 or a == 4 or a ==5:
    print(seasons_dict.get(2))
    print(seasons_list[1])
elif a == 6 or a == 7 or a == 8:
    print(seasons_dict.get(3))
    print(seasons_list[2])

elif a == 9 or a == 10 or a == 11:
    print(seasons_dict.get(4))
    print(seasons_list[3])
else:
        print("Ошибка: допустимы значения от 1 до 12")


'''
4. Пользователь вводит строку из нескольких слов, разделённых пробелами.
 Вывести каждое слово с новой строки. Строки необходимо пронумеровать.
 Если в слово длинное, выводить только первые 10 букв в слове.
'''

my_str = input("Введите несколько слов, разделенных пробелами \n")
my_word = []
num = 1
for a in range(my_str.count(' ') + 1):
    my_word = my_str.split()
    if len(str(my_word)) <= 10:
        print(f" {num} {my_word [a]}")
        num += 1
    else:
        print(f" {num} {my_word [a] [0:10]}")
        num += 1


'''
5. Реализовать структуру «Рейтинг», представляющую собой не возрастающий набор натуральных чисел.
У пользователя необходимо запрашивать новый элемент рейтинга. Если в рейтинге существуют
элементы с одинаковыми значениями, то новый элемент с тем же значением должен разместиться после них.
Подсказка. Например, набор натуральных чисел: 7, 5, 3, 3, 2.
Пользователь ввел число 3. Результат: 7, 5, 3, 3, 3, 2.
Пользователь ввел число 8. Результат: 8, 7, 5, 3, 3, 2.
Пользователь ввел число 1. Результат: 7, 5, 3, 3, 2, 1.
Набор натуральных чисел можно задать непосредственно в коде, например, my_list = [7, 5, 3, 3, 2].
'''

number = int(input("Введите число: "))
my_list = [7, 5, 3, 3, 2]
c = my_list.count(number)
for element in my_list:
    if c > 0:
        i = my_list.index(number)
        my_list.insert(i+c, number)
        break
    else:
        if number > element:
            j = my_list.index(element)
            my_list.insert(j, number)
            break
        elif number < my_list[len(my_list) - 1]:
            my_list.append(number)
print(my_list)



